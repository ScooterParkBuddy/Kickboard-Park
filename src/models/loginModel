import loginAxios from '../lib/loginAxios';
import postAxios from '../lib/postAxios';

async function isLogin() {
  const result = await loginAxios({
    method: 'get',
    url: '/my',
  })
    .then((res) => {
      return res.data.name;
    })
    .catch((error) => {
      if (error.response.statusText == 'Refresh Token이 만료되었습니다.') return 'Unauthorized AccessToken';
      else if (
        error.response.statusText == 'Refresh Token이 만료되었습니다. 다시 로그인을 진행하여 Token을 갱신해주세요.'
      )
        return 'Unauthorized RefreshToken';
      else return false;
    });
  return result;
}
async function getUserRFToken() {
  await loginAxios({
    method: 'get',
    url: '/my',
  }).then((res) => {
    const { refreshToken } = res.data.refreshToken;
    loginAxios.defaults.headers.common['Authorization'] = `Bearer ${refreshToken}`;
  });
}
async function getAccessToken() {
  await loginAxios({
    method: 'get',
    url: '/refresh',
  }).then((res) => {
    const { accessToken } = res.data.access_token;
    loginAxios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;
    postAxios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;
  });
}
async function getUserName() {
  const data = await loginAxios({
    method: 'get',
    url: '/my',
  })
    .then((res) => {
      return res.data.name;
    })
    .catch((error) => {
      return error.response;
    });
  return data;
}
const LoginModel = {
  isLogin,
  getUserRFToken,
  getAccessToken,
  getUserName,
};
export default LoginModel;
